name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install and test frontend
      - name: Install and test frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build
          npm test

      # Set up backend environment
      - name: Set up backend environment
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install and test backend
      - name: Install and test backend
        working-directory: ./backend
        run: |
          npm install
          npm test

  dockerize:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push frontend Docker image
      - name: Build and push frontend Docker image
        working-directory: ./frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/url-shortener-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/url-shortener-frontend:latest

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        working-directory: ./backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/url-shortener-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/url-shortener-backend:latest

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      # Deploy to AWS ECS (as an example)
      - name: Deploy to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: url-shortener-service
          cluster: url-shortener-cluster
          wait-for-service-stability: true
